name: CI # Nombre del workflow = un conjunto de tareas a ejecutar

on: [push] # Se ejecuta cuando hay un push a cualquier branch

jobs: # Defino los jobs, un conjunto de pasos
 sast_scan: # Defino un job puntual
   name: Run Bandit Scan # Nombre de este job en particular
   runs-on: ubuntu-latest # Se ejecuta en un runner (VM/Container) de Ubuntu última versión

   steps: # Defino los pasos a ejecutar en este job
   - name: Checkout code # Nombre el paso. Checkout es para copiar el código del repo al runner, pues es una máquina fresca/sin nada que se invoca para correr este job.
     uses: actions/checkout@v2 # defino qué hace el paso con "uses", aquí van las acciones de GitHub u otros proveedores.
                               # (under "actions/* reusable actions are hosted)
   - name: Set up Python # Como nada está instalado en el runner inicialmente, también debo instalar cuanta dependencia y software necesite para mi job
     uses: actions/setup-python@v2 # Paso que instala Python en el runner
     with:
       python-version: 3.8 # Le digo qué versión de Python quiero instalar, esta acción también se encuentra en el marketplace de acciones de la derecha

   - name: Install Bandit
     run: pip install bandit # en este paso instalamos bandit con pip

   - name: Run Bandit Scan 
     run: bandit -ll -ii -r . -f json -o bandit-report.json # este paso corre el comando bandit con varias banderas para esanear mi código con bandit (haciendo el paso de SAST de DEvSecOps)
                             # bandit → Ejecuta la herramienta Bandit (Escanea tu código en busca de vulnerabilidades en Pytho)
                             # -ll → Muestra solo hallazgos de severidad nivel ALTO y MEDIO (evita los de bajo riesgo).
                             # -ii → sólo hallazgos de confiabilidad media y alta (para reducir ruido en la salida).
                             # -r . → Ejecuta el escaneo de forma recursiva en todos los archivos Python del directorio actual (.).
                             # -f json → Genera el reporte en formato JSON en lugar de texto plano.
                             # -o bandit-report.json → Guarda el resultado en un archivo llamado bandit-report.json.
   - name: Upload Artifact
     uses: actions/upload-artifact@v3 # actions/upload-artifact se usa para guardar archivos generados en el workflow y hacerlos accesibles desde la pestaña "Artifacts"
     if: always()
     with:
      name: bandit-findings
      path: bandit-report.json
                                      # "upload" almacena temporalmente en GitHub un archivo generado en la ejecuión del worflow, para que puedas descargarlo después.
                                      # Un artifact es cualquier archivo generado durante el workflow. Puede ser:
                                      # ✅ Un reporte de seguridad (bandit-report.json, dependency-check-report.html).
                                      # ✅ Un binario o ejecutable compilado.
                                      # ✅ Logs o resultados de pruebas.

 image_scan:
   name: Build Image and Run Image Scan
   runs-on: ubuntu-latest

   steps:
   - name: Checkout code
     uses: actions/checkout@v2

   - name: Set up Docker
     uses: docker-practice/actions-setup-docker@v1
     with:
      docker_version: '20.10.7'

   - name: Build Docker Image
     run: docker build -f Dockerfile -t myapp:latest .

   # - name: Docker Scout Scan
     # run: |
       # curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
       # sh install-scout.sh
       # echo ${{ secrets.REPO_PWD }} | docker login -u ${{ secrets.REPO_USER }} --password-stdin
       # docker scout quickview
       # docker scout cves

   - name: Docker Scout Scan
     uses: docker/scout-action@v1.0.9
     with:
       dockerhub-user: ${{ secrets.REPO_USER }}
       dockerhub-password: ${{ secrets.REPO_PWD }}
       command: quickview,cves
       only-severities: critical,high
       sarif-file: scout-report.sarif

   - name: Upload Artifact
     uses: actions/upload-artifact@v3
     if: always()
     with:
       name: docker-scout-findings
       path: scout-report.sarif




   

   
